package com.promineotech.rudimentarybanking.service;

import java.time.LocalDate;


import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.promineotech.rudimentarybanking.entites.Account;
import com.promineotech.rudimentarybanking.entites.Deposit;
import com.promineotech.rudimentarybanking.repository.AccountRepository;
import com.promineotech.rudimentarybanking.repository.DepositRepository;
import com.promineotech.rudimentarybanking.util.DepositStatus;

@Service
public class DepositService {
	
	private static final Logger logger = LogManager.getLogger(DepositService.class);
	
	@Autowired
	private DepositRepository repo;
	
	@Autowired
	private AccountRepository accountRepo;

	public Deposit cancelDeposit(Long depositId) throws Exception {
		try {
			Deposit deposit = repo.findOne(depositId);
			deposit.setStatus(DepositStatus.CANCELED);
			return repo.save(deposit);
		} catch (Exception e) {
			logger.error("Exception occured when trying to cancel deposit: " + depositId, e);
			throw new Exception("Unable to cancel deposit");
		}
	}
	
	public Deposit newDeposit(Long accountId, double amount) { // this seems to be correct, I still don't know if I need to create then submit the deposit?
		Deposit deposit = new Deposit();
		Account account = accountRepo.findOne(accountId);
		AccountService accountService = new AccountService();
		account.setId(accountId);
		try {
			accountService.increaseBalance(account, amount);
		} catch (Exception e) {
			e.printStackTrace();
		}
		deposit.setDateDeposited(LocalDate.now());
		deposit.setStatus(DepositStatus.DEPOSITED); 
		return repo.save(deposit);
		}

}
