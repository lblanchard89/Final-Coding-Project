package com.promineotech.rudimentarybanking.service;

import java.time.LocalDate;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.promineotech.rudimentarybanking.entites.Account;
import com.promineotech.rudimentarybanking.entites.Deposit;
import com.promineotech.rudimentarybanking.entites.User;
import com.promineotech.rudimentarybanking.repository.AccountRepository;
import com.promineotech.rudimentarybanking.repository.DepositRepository;
import com.promineotech.rudimentarybanking.repository.UserRepository;
import com.promineotech.rudimentarybanking.util.DepositStatus;

@Service
public class DepositService {
	
	private static final Logger logger = LogManager.getLogger(DepositService.class);
	private final int DEPOSIT_DAYS = 1;
	
	@Autowired
	private DepositRepository repo;
	
	@Autowired
	private AccountRepository accountRepo;
	
	@Autowired
	private UserRepository userRepo;
	
	// do I need a create deposit and a submit deposit? I'm having difficulty understanding how this should work exactly.
	public Deposit completeDeposit(Long depositId) throws Exception {   //<------I may need to add in the information of the deposit here(amount, check pictures)
		try {
			Deposit deposit = createDeposit(depositId);
			deposit.setStatus(DepositStatus.DEPOSITED);
			return repo.save(deposit);
		} catch (Exception e) {
			logger.error("Exception occured while trying to create a new deposit for account: " + depositId, e);
			throw e;
		}
	}
	
	//cancel deposit

	private Deposit createDeposit(User userId, Account accountId) {
		Deposit deposit = new Deposit();
		//don't know how to connect to specific user making deposit
		//don't know how to set up user
		deposit.setAccount(deposit.getAccount());
		deposit.setId(deposit.getId());
		deposit.setAmount(deposit.getAmount());
		deposit.setCheckFrontPicUrl(deposit.getCheckFrontPicUrl());
		deposit.setCheckBackPicUrl(deposit.getCheckBackPicUrl());
		deposit.setDate(LocalDate.now());
		deposit.estimatedAvailability(LocalDate.now().plusDays(DEPOSIT_DAYS));
		deposit.setStatus(DepositStatus.PENDING);
		return deposit;
		
		
		
	}

}
